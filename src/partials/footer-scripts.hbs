<script src="{{uiRootPath}}/js/site.js"></script>
<script src="{{uiRootPath}}/js/vendor/highlight.js"></script>
<script src="{{{uiRootPath}}}/js/vendor/jquery.js"></script>
<script src="{{{uiRootPath}}}/js/vendor/bootstrap.js"></script>
<script src="{{{uiRootPath}}}/js/vendor/tab.js"></script>
<!-- scripts from header scripts - start -->
<!-- vanilla model js for feedback form button -->
<!-- <script src="https://thoughtspot.github.io/js/index.js"></script> -->
<!--<script src="https://thoughtspotnext.ngrok.io/scripts/algolia/dist/algolia_search.bundled.js"></script>-->
<!-- <script src="https://scripts.thoughtspot.com/algolia_search.bundled.js"></script>

<script>
  let initialized = false;
  async function initializeAlgolia() {
    if (initialized) return;
    initialized = true;

    const searchElement = document.querySelector('#algolia-search');
    document.body.classList.add('algolia_docs')
    searchElement.classList.add('algolia_docs')

    const pathParams = window.location.pathname.split('/').filter(Boolean)

    let deployment = ['software', 'cloud'].indexOf(pathParams[0]) > -1 ? pathParams[0] : null
    let version = pathParams[1] ? pathParams[1] : null

    let filters = {docs: {}}

    if (deployment) {
      filters.docs.deployment = deployment
    }

    if (version) {
      filters.docs.version = version
    }

    // FULL SCREEN
    const fullScreenSearchWrapper = document.createElement('div')
    const fullScreenSearchContainer = document.createElement('div')
    fullScreenSearchWrapper.classList.add('full_screen_search_wrapper')
    fullScreenSearchWrapper.style.display = 'none'
    fullScreenSearchContainer.classList.add('full_screen_search')
    fullScreenSearchContainer.classList.add('algolia_search_wrapper')
    document.body.appendChild(fullScreenSearchWrapper)
    fullScreenSearchWrapper.appendChild(fullScreenSearchContainer)

    const fullScreenAlgoliaSearch = await new window.AlgoliaSearchComponent(fullScreenSearchContainer, {
      inline: false,
      firstResults: 'docs',
      onCloseButton: () => {
        fullScreenSearchWrapper.style.display = 'none'
        document.body.classList.remove('full_screen_search_open')
      }
    });

    // INLINE
    const algoliaSearch = await new window.AlgoliaSearchComponent(searchElement, {
      inline: true,
      filters: filters,
      addClass: 'header_algolia_search',
      firstResults: 'docs',
      viewMoreFunction: (section, searchValue, instance) => {
        fullScreenSearchWrapper.style.display = 'block';
        fullScreenAlgoliaSearch.setQuery(searchValue)
        fullScreenAlgoliaSearch.viewMoreFilter(section)
        document.body.classList.add('full_screen_search_open')
      // instance.api.closeSearchResults()

        // Key is refinement list class name. Value is value of element to click
        fullScreenAlgoliaSearch.selectFilters({
          deployment: _.get(filters, 'docs.deployment'),
          docs_version: _.get(filters, 'docs.version')
        })
      }
    });

    // BODY
    if (window.location.pathname == '/home/') {
      const bodySearchWrapper = document.createElement('div')
      bodySearchWrapper.classList.add('algolia_search_wrapper')

      document.querySelector('#preamble').prepend(bodySearchWrapper)

      const bodyAlgoliaSearch = await new window.AlgoliaSearchComponent(bodySearchWrapper, {
        inline: true,
        filters: filters,
        firstResults: 'docs',
        viewMoreFunction: (section, searchValue, instance) => {
          fullScreenSearchWrapper.style.display = 'block';
          fullScreenAlgoliaSearch.setQuery(searchValue)
          fullScreenAlgoliaSearch.viewMoreFilter(section)
          document.body.classList.add('full_screen_search_open')
          instance.api.closeSearchResults()

          // Key is refinement list class name. Value is value of element to click
          fullScreenAlgoliaSearch.selectFilters({
            deployment: _.get(filters, 'docs.deployment'),
            docs_version: _.get(filters, 'docs.version')
          })
        }
      });
    }

  }

  function awaitAlgolia() {
    if (window.AlgoliaSearchComponent) {
      initializeAlgolia();
    } else {
      window.addEventListener('algoliaReady', initializeAlgolia);
    }
  }

  if (document.readyState === 'complete') {
    awaitAlgolia()
  } else {
      document.addEventListener("DOMContentLoaded", awaitAlgolia);
  }

</script> -->
  <!--  <script>var vanillaModal = new VanillaModal.default()</script> -->
  <!--  <script>const modal = new VanillaModal(options);</script> -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
          <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
<!-- scripts from header scripts - end -->
<!--<script async src="{{{uiRootPath}}}/js/vendor/docsearch.min.js"></script>-->
<!--  <script src="{{{uiRootPath}}}/js/vendor/tippy.js"></script>-->
<!-- <script async src="{{{uiRootPath}}}/js/vendor/popper.js"></script>-->

<!--<script src="https://unpkg.com/@popperjs/core@2"></script>-->
<!--<script src="https://unpkg.com/tippy.js@6"></script>-->
<!-- <script>
tippy('button', {content: 'tooltip'});
</script>
<script>
// IIFE to ensure safe use of $
(function( $ ) {

  // Create plugin
  $.fn.tooltips = function(el) {

    var $tooltip,
      $body = $('body'),
      $el;

    // Ensure chaining works
    return this.each(function(i, el) {

      $el = $(el).attr("data-tooltip", i);

      // Make DIV and append to page
      var $tooltip = $('<div class="tooltip" data-tooltip="' + i + '">' + $el.attr('title') + '<div class="arrow"></div></div>').appendTo("body");

      // Position right away, so first appearance is smooth
      var linkPosition = $el.position();

      $tooltip.css({
        top: linkPosition.top - $tooltip.outerHeight() - 13,
        left: linkPosition.left - ($tooltip.width()/2)
      });

      $el
      // Get rid of yellow box popup
      .removeAttr("title")

      // Mouseenter
      .hover(function() {

        $el = $(this);

        $tooltip = $('div[data-tooltip=' + $el.data('tooltip') + ']');

        // Reposition tooltip, in case of page movement e.g. screen resize
        var linkPosition = $el.position();

        $tooltip.css({
          top: linkPosition.top - $tooltip.outerHeight() - 13,
          left: linkPosition.left - ($tooltip.width()/2)
        });

        // Adding class handles animation through CSS
        $tooltip.addClass("active");

        // Mouseleave
      }, function() {

        $el = $(this);

        // Temporary class for same-direction fadeout
        $tooltip = $('div[data-tooltip=' + $el.data('tooltip') + ']').addClass("out");

        // Remove all classes
        setTimeout(function() {
          $tooltip.removeClass("active").removeClass("out");
          }, 300);

        });

      });

    }

})(jQuery);

$("a[title]").tooltips();
</script> -->
<!-- fetched from https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js -->
<!-- old search snippet - begin <script src="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js"></script>
<script>
function focusSearchInput () { document.querySelector('#input').focus() }
var search = docsearch({
  appId: '7DXYLT633X',
  apiKey: 'f2070e11a04d7c9e7487102e4a68ea1a',
  indexName: 'search-manager',
  inputSelector: '#search-input',
  autocompleteOptions: { hint: false, keyboardShortcuts: ['s'] },
  algoliaOptions: {
    facetFilters: [['version:latest', 'version:6.2', 'version:6.1', 'version:6.0']],
  }
}).autocomplete
search.on('autocomplete:closed', function () { search.autocomplete.setVal() })
focusSearchInput()
window.addEventListener('load', focusSearchInput)
</script>-->

<!-- old search snippet - end -->
<!-- docsearch snippet - begin -->
<!-- <script src="https://cdn.jsdelivr.net/npm/docsearch.js@2/dist/cdn/docsearch.min.js"></script> -->
 <!-- <script>
  docsearch({
    // Your apiKey and indexName will be given to you once
    // we create your config
    apiKey: 'f2070e11a04d7c9e7487102e4a68ea1a',
    indexName: 'search-manager',
    appId: '7DXYLT633X', // Should be only included if you are running DocSearch on your own.
    // Replace inputSelector with a CSS selector
    // matching your search input
    // Set debug to true to inspect the dropdown
    debug: true,
    inputSelector: '#search-input',
    autocompleteOptions: { hint: false, keyboardShortcuts: ['s'] },
    algoliaOptions: {
      facetFilters: [['version:latest', 'version:6.2', 'version:6.1', 'version:6.0']],
  },
  });
</script> -->
<!-- docsearch snippet - end -->

<!--- new fixed docsearch snippet - begin

<script>
function focusSearchInput () { document.querySelector('#search-input').focus() }
var search = docsearch({
  appId: '7DXYLT633X',
  apiKey: 'f2070e11a04d7c9e7487102e4a68ea1a',
  indexName: 'search-manager',
  inputSelector: '#search-input',
  autocompleteOptions: { hint: false, keyboardShortcuts: ['s'] },
  algoliaOptions: {
    facetFilters: [['version:latest', 'version:6.2', 'version:6.1', 'version:6.0']],
  }
}).autocomplete
search.on('autocomplete:closed', function () { search.autocomplete.setVal() })
focusSearchInput()
window.addEventListener('load', focusSearchInput)
</script>

<script async id="search-script" src="../../_/js/vendor/docsearch.js" data-app-id="7DXYLT633X" data-api-key="f2070e11a04d7c9e7487102e4a68ea1a" data-index-name="search-manager" data-stylesheet="../../_/css/vendor/docsearch.css"></script>

new fixed docsearch snippet - end -->

<!-- yet another attempt - begin

<script>
function focusSearchInput () { document.querySelector('#search-input').focus() }
var search = docsearch({
  appId: '7DXYLT633X',
  apiKey: 'eb713b359b0ea12251c4c8627758d26d',
  indexName: 'search-manager',
  inputSelector: '#search-input',
  autocompleteOptions: { hint: false, keyboardShortcuts: ['s'] },
  algoliaOptions: {
    facetFilters: [['version:latest', 'version:6.2', 'version:6.1', 'version:6.0']],
  }
}).autocomplete
search.on('autocomplete:closed', function () { search.autocomplete.setVal() })
focusSearchInput()
window.addEventListener('load', focusSearchInput)
</script>
-->
<!--<script async id="search-script" src="{{{uiRootPath}}}/js/vendor/docsearch.js" data-app-id="7DXYLT633X" data-api-key="eb713b359b0ea12251c4c8627758d26d" data-index-name="search-manager" data-stylesheet="{{{uiRootPath}}}/css/vendor/docsearch.css"></script>-->
<!-- <script async id="search-script" src="{{{uiRootPath}}}/js/vendor/docsearch.js" data-app-id="FFSASUS8DI" data-api-key="d34a395d4d4bb8b1434e094fcb8cc305" data-index-name="crawler_thoughtspot_documentation" data-stylesheet="{{{uiRootPath}}}/css/vendor/docsearch.css"></script> -->
<!--  Site Search -->
<!-- yet another attempt - end -->
