{"version":3,"sources":["../src/button.js"],"names":["NAME","DATA_KEY","JQUERY_NO_CONFLICT","$","fn","CLASS_NAME_ACTIVE","SELECTOR_DATA_TOGGLE_CARROT","SELECTOR_INPUT","SELECTOR_BUTTON","Button","element","this","_element","shouldAvoidTriggerChange","toggle","input","triggerChangeEvent","addAriaPressed","rootElement","closest","querySelector","type","checked","classList","contains","activeElement","removeClass","trigger","focus","hasAttribute","setAttribute","toggleClass","dispose","removeData","_jQueryInterface","config","avoidTriggerChange","each","$element","data","document","on","event","inputBtn","button","target","initialButton","hasClass","preventDefault","tagName","call","test","window","buttons","slice","querySelectorAll","i","len","length","add","remove","getAttribute","Constructor","noConflict"],"mappings":"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","file":"js/vendor/button.js","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.6.0): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport $ from 'jquery'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button'\nconst VERSION = '4.6.0'\nconst DATA_KEY = 'bs.button'\nconst EVENT_KEY = `.${DATA_KEY}`\nconst DATA_API_KEY = '.data-api'\nconst JQUERY_NO_CONFLICT = $.fn[NAME]\n\nconst CLASS_NAME_ACTIVE = 'active'\nconst CLASS_NAME_BUTTON = 'btn'\nconst CLASS_NAME_FOCUS = 'focus'\n\nconst SELECTOR_DATA_TOGGLE_CARROT = '[data-toggle^=\"button\"]'\nconst SELECTOR_DATA_TOGGLES = '[data-toggle=\"buttons\"]'\nconst SELECTOR_DATA_TOGGLE = '[data-toggle=\"button\"]'\nconst SELECTOR_DATA_TOGGLES_BUTTONS = '[data-toggle=\"buttons\"] .btn'\nconst SELECTOR_INPUT = 'input:not([type=\"hidden\"])'\nconst SELECTOR_ACTIVE = '.active'\nconst SELECTOR_BUTTON = '.btn'\n\nconst EVENT_CLICK_DATA_API = `click${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_FOCUS_BLUR_DATA_API = `focus${EVENT_KEY}${DATA_API_KEY} ` +\n                          `blur${EVENT_KEY}${DATA_API_KEY}`\nconst EVENT_LOAD_DATA_API = `load${EVENT_KEY}${DATA_API_KEY}`\n\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element\n    this.shouldAvoidTriggerChange = false\n  }\n\n  // Getters\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  // Public\n\n  toggle() {\n    let triggerChangeEvent = true\n    let addAriaPressed = true\n    const rootElement = $(this._element).closest(SELECTOR_DATA_TOGGLES)[0]\n\n    if (rootElement) {\n      const input = this._element.querySelector(SELECTOR_INPUT)\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(CLASS_NAME_ACTIVE)) {\n            triggerChangeEvent = false\n          } else {\n            const activeElement = rootElement.querySelector(SELECTOR_ACTIVE)\n\n            if (activeElement) {\n              $(activeElement).removeClass(CLASS_NAME_ACTIVE)\n            }\n          }\n        }\n\n        if (triggerChangeEvent) {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          if (input.type === 'checkbox' || input.type === 'radio') {\n            input.checked = !this._element.classList.contains(CLASS_NAME_ACTIVE)\n          }\n\n          if (!this.shouldAvoidTriggerChange) {\n            $(input).trigger('change')\n          }\n        }\n\n        input.focus()\n        addAriaPressed = false\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(CLASS_NAME_ACTIVE))\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(CLASS_NAME_ACTIVE)\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY)\n    this._element = null\n  }\n\n  // Static\n\n  static _jQueryInterface(config, avoidTriggerChange) {\n    return this.each(function () {\n      const $element = $(this)\n      let data = $element.data(DATA_KEY)\n\n      if (!data) {\n        data = new Button(this)\n        $element.data(DATA_KEY, data)\n      }\n\n      data.shouldAvoidTriggerChange = avoidTriggerChange\n\n      if (config === 'toggle') {\n        data[config]()\n      }\n    })\n  }\n}\n\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n$(document)\n  .on(EVENT_CLICK_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    let button = event.target\n    const initialButton = button\n\n    if (!$(button).hasClass(CLASS_NAME_BUTTON)) {\n      button = $(button).closest(SELECTOR_BUTTON)[0]\n    }\n\n    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n      event.preventDefault() // work around Firefox bug #1540995\n    } else {\n      const inputBtn = button.querySelector(SELECTOR_INPUT)\n\n      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n        event.preventDefault() // work around Firefox bug #1540995\n        return\n      }\n\n      if (initialButton.tagName === 'INPUT' || button.tagName !== 'LABEL') {\n        Button._jQueryInterface.call($(button), 'toggle', initialButton.tagName === 'INPUT')\n      }\n    }\n  })\n  .on(EVENT_FOCUS_BLUR_DATA_API, SELECTOR_DATA_TOGGLE_CARROT, event => {\n    const button = $(event.target).closest(SELECTOR_BUTTON)[0]\n    $(button).toggleClass(CLASS_NAME_FOCUS, /^focus(in)?$/.test(event.type))\n  })\n\n$(window).on(EVENT_LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLES_BUTTONS))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    const input = button.querySelector(SELECTOR_INPUT)\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n\n  // find all button toggles\n  buttons = [].slice.call(document.querySelectorAll(SELECTOR_DATA_TOGGLE))\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i]\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(CLASS_NAME_ACTIVE)\n    } else {\n      button.classList.remove(CLASS_NAME_ACTIVE)\n    }\n  }\n})\n\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface\n$.fn[NAME].Constructor = Button\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT\n  return Button._jQueryInterface\n}\n\nexport default Button\n"]}